scRCD.visualize<-function(tsne,scores,cell.type,frac.list=NULL,frac=NULL, rare = T, method.name = NULL){
  library(ggplot2)
  df<-data.frame(cbind(tsne$Y),scores,cell.type)
  colnames(df)<-c("t_SNE_1","t_SNE_2","scores","cell_ontology_class")
  base_size = 12;
  if(is.logical(rare)==F)
  {stop("argument rare must be logical to indicate whether show top rare cells or top common cells")}
  if(is.character(method.name)==F){stop("method.name must be characters to specify the rareness score models you used")}
  decreasing.indic<-rare
  rare.char = NULL;
  if(rare == T){rare.char = " rare"}
  else{rare.char = " common"}
  method.name.char=NULL
  if(is.null(method.name)){
    method.name.char = ""
  }
  else{
    if(is.character(method.name)==F){
      stop("method.name must be characters")
    }
    else{
      method.name.char = method.name
    }
  }
  
  theme.plt<-theme(legend.key.size = unit(1, "lines"),
                   legend.text = element_text(size = 0.55*base_size,
                                              color = "black"),
                   legend.title = element_text(size = 0.55*base_size,
                                               face = "bold",
                                               hjust = 0,
                                               color = "black"),
                   plot.title = element_text(size = 0.8*base_size,
                                             color = "black"),
                   axis.text.x = element_text(size = base_size*0.6, color = "black",
                                              lineheight = 0.9),
                   axis.text.y = element_text(size = base_size*0.6, color = "black",
                                              lineheight = 0.9))
  if(is.null(frac.list)){
    if(is.null(frac)){
      stop("Should input either frac.list or frac")
    }
    else{
      detect.num = floor(frac*dim(tsne$Y)[1])
      uniform.sample.index<-sample(1:dim(tsne$Y)[1],size = detect.num, replace = F)
      
      plt1<-ggplot(data = df[order(df[,"scores"],decreasing = rare)[1:detect.num],],
                   aes(x = t_SNE_1, y = t_SNE_2))+geom_point(aes(color = cell_ontology_class ), size = 0.35)
      plt1<-plt1+xlim(min(tsne$Y[,1]),max(tsne$Y[,1]))+ylim(min(tsne$Y[,2]),max(tsne$Y[,2]))+ggtitle(paste0(paste0(detect.num, paste0(rare.char, " cells detected, ")),method.name.char))+theme.plt
      
      plt2<-ggplot(data = df,
                   aes(x = t_SNE_1, y = t_SNE_2),)+geom_point(aes(color = cell_ontology_class ), size = 0.35)
      plt2<-plt2+xlim(min(tsne$Y[,1]),max(tsne$Y[,1]))+ylim(min(tsne$Y[,2]),max(tsne$Y[,2]))+ggtitle("Original data")+theme.plt
      
      plt3<-ggplot(data = df[uniform.sample.index,],
                   aes(x = t_SNE_1, y = t_SNE_2),)+geom_point(aes(color = cell_ontology_class ), size = 0.35)
      plt3<-plt3+xlim(min(tsne$Y[,1]),max(tsne$Y[,1]))+ylim(min(tsne$Y[,2]),max(tsne$Y[,2]))+ggtitle(paste0(detect.num," uniformly sampled cells"))+theme.plt
      
      return(list(tsne.out = tsne$Y,plt.rare = plt1, plt.all = plt2, plt.unif = plt3))
    }
    
  }
  else{
    plt.all<-ggplot(data = df,
                    aes(x = t_SNE_1, y = t_SNE_2),)+geom_point(aes(color = cell_ontology_class) , size = 0.35)
    plt.all<-plt.all+xlim(min(tsne$Y[,1]),max(tsne$Y[,1]))+ylim(min(tsne$Y[,2]),max(tsne$Y[,2]))+ggtitle("Original data")+theme.plt
    
    plt.list<-list()
    for(i in 1:length(frac.list)){
      detect.num = floor(frac.list[i]*dim(tsne$Y)[1])
      plt<-ggplot(data = df[order(df[,"scores"],decreasing = rare)[1:detect.num],],
                  aes(x = t_SNE_1, y = t_SNE_2))+geom_point(aes(color = cell_ontology_class) , size = 0.35)
      plt<-plt+xlim(min(tsne$Y[,1]),max(tsne$Y[,1]))+ylim(min(tsne$Y[,2]),max(tsne$Y[,2]))+ggtitle(paste0(paste0(detect.num, paste0(rare.char, " cells detected, ")),method.name.char))+theme.plt
      plt.list[[as.character(frac.list[i])]]<-plt
    }
    return(list(tsne.out = tsne$Y , plt.all.cell = plt.all , plt.frac.list = plt.list))
  }
  
}
